#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
from datetime import datetime

class SimpleUpdater:
    def __init__(self):
        self.repo_url = "https://github.com/zyphralex/Terminal-Shadows.git"
        self.game_dir = os.path.dirname(os.path.abspath(__file__))
        self.data_dir = os.path.expanduser("~/.terminal_shadows_ultimate")
        self.backup_dir = os.path.join(self.data_dir, "backups")
        self.temp_dir = os.path.join(self.game_dir, "temp_update")
        self.current_version = self.get_current_version()
        
    def get_current_version(self):
        version_file = os.path.join(self.game_dir, "version.txt")
        if os.path.exists(version_file):
            with open(version_file, 'r') as f:
                return f.read().strip()
        return "2.0"
    
    def check_git_installed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ git"""
        try:
            subprocess.run(["git", "--version"], check=True, capture_output=True)
            return True
        except:
            return False
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π"""
        print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(self.backup_dir, f"backup_{timestamp}.zip")
        
        try:
            import zipfile
            saves_dir = os.path.join(self.data_dir, "saves")
            
            with zipfile.ZipFile(backup_file, 'w') as zipf:
                if os.path.exists(saves_dir):
                    for root, dirs, files in os.walk(saves_dir):
                        for file in files:
                            file_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_path, self.data_dir)
                            zipf.write(file_path, arcname)
                
                config_file = os.path.join(self.data_dir, "config.json")
                if os.path.exists(config_file):
                    zipf.write(config_file, "config.json")
                    
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
            return backup_file
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def clone_repo(self):
        """–ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        print("üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        
        try:
            if os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
            
            result = subprocess.run([
                "git", "clone", self.repo_url, self.temp_dir
            ], capture_output=True, text=True, check=True)
            
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            if "could not resolve host" in e.stderr.lower():
                print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def get_remote_version(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            version_path = os.path.join(self.temp_dir, "version.txt")
            if os.path.exists(version_path):
                with open(version_path, 'r') as f:
                    return f.read().strip()
            return "unknown"
        except:
            return "unknown"
    
    def update_files(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–≥—Ä—ã"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
        
        try:
            update_items = [
                "main.py", "updater.py", "requirements.txt", "version.txt",
                "run_game.sh", "install.sh", "update_game.sh", "README.md",
                "data", "story"
            ]
            
            updated_count = 0
            
            for item in update_items:
                src_path = os.path.join(self.temp_dir, item)
                dst_path = os.path.join(self.game_dir, item)
                
                if os.path.exists(src_path):
                    if os.path.isdir(src_path):
                        if os.path.exists(dst_path):
                            shutil.rmtree(dst_path)
                        shutil.copytree(src_path, dst_path)
                    else:
                        shutil.copy2(src_path, dst_path)
                    
                    print(f"üìÅ –û–±–Ω–æ–≤–ª–µ–Ω: {item}")
                    updated_count += 1
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {updated_count}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def update_dependencies(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"""
        print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        requirements_file = os.path.join(self.game_dir, "requirements.txt")
        if os.path.exists(requirements_file):
            try:
                subprocess.run([
                    sys.executable, "-m", "pip", "install", "-r", 
                    requirements_file, "--upgrade", "--quiet"
                ], check=True)
                print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if os.path.exists(self.temp_dir):
            try:
                shutil.rmtree(self.temp_dir)
            except:
                pass
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–ø–¥–µ–π—Ç–µ—Ä–∞"""
        print("üîÑ –ü–†–û–°–¢–û–ô –ê–ü–î–ï–ô–¢–ï–† TERMINAL SHADOWS")
        print("=" * 50)
        print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {self.current_version}")
        print(f"üåê –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {self.repo_url}")
        print()
        
        if not self.check_git_installed():
            print("‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git:")
            print("  Linux: sudo apt install git")
            return
        
        choice = input("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è? (y/N): ").strip().lower()
        if choice != 'y':
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        backup_file = self.create_backup()
        
        if not self.clone_repo():
            self.cleanup()
            return
        
        remote_version = self.get_remote_version()
        print(f"üåê –í–µ—Ä—Å–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {remote_version}")
        
        if remote_version == self.current_version:
            print("‚úÖ –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã!")
            self.cleanup()
            return
        
        choice = input(f"–û–±–Ω–æ–≤–∏—Ç—å —Å {self.current_version} –Ω–∞ {remote_version}? (y/N): ").strip().lower()
        if choice != 'y':
            print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            self.cleanup()
            return
        
        if self.update_files():
            self.update_dependencies()
            print("\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            print("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        
        self.cleanup()

if __name__ == "__main__":
    updater = SimpleUpdater()
    updater.run()
