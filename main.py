#!/usr/bin/env python3
import os
import sys
import time
import random
import pickle
import json
from datetime import datetime

sys.path.append('story')
chapters = []
for i in range(1, 31):
    try:
        module = __import__(f'chapter{i}')
        chapters.append(getattr(module, f'CHAPTER_{i}'))
    except Exception as e:
        print(f"Error loading chapter {i}: {e}")

class GameData:
    def __init__(self):
        self.data_dir = os.path.expanduser("~/.terminal_shadows_ultimate")
        self.save_dir = os.path.join(self.data_dir, "saves")
        self.config_file = os.path.join(self.data_dir, "config.json")
        self.ensure_directories()
        self.load_config()
        
    def ensure_directories(self):
        os.makedirs(self.data_dir, exist_ok=True)
        os.makedirs(self.save_dir, exist_ok=True)
        
    def load_config(self):
        default_config = {
            "language": "ru",
            "difficulty": "normal",
            "autosave": True,
            "animations": True,
            "music": False
        }
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    self.config = json.load(f)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø–æ–ª—è
                for key, value in default_config.items():
                    if key not in self.config:
                        self.config[key] = value
            except:
                self.config = default_config
        else:
            self.config = default_config
            self.save_config()
            
    def save_config(self):
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
        
    def save_game(self, player_data, slot=0, game_mode="story"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞"""
        if slot == 0:
            save_file = os.path.join(self.save_dir, f"autosave_{game_mode}.dat")
        else:
            save_file = os.path.join(self.save_dir, f"save{slot}_{game_mode}.dat")
            
        save_data = {
            'player': player_data,
            'timestamp': datetime.now().isoformat(),
            'version': '2.0',
            'game_mode': game_mode  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ
        }
        try:
            with open(save_file, 'wb') as f:
                pickle.dump(save_data, f)
            return True
        except Exception as e:
            print(f"Save error: {e}")
            return False
            
    def load_game(self, slot=0, game_mode="story"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞"""
        if slot == 0:
            save_file = os.path.join(self.save_dir, f"autosave_{game_mode}.dat")
        else:
            save_file = os.path.join(self.save_dir, f"save{slot}_{game_mode}.dat")
            
        if os.path.exists(save_file):
            try:
                with open(save_file, 'rb') as f:
                    return pickle.load(f)
            except Exception as e:
                print(f"Load error: {e}")
                return None
        return None
        
    def get_saves(self, game_mode="story"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        saves = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if os.path.exists(os.path.join(self.save_dir, f"autosave_{game_mode}.dat")):
            saves.append(0)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        for i in range(1, 4):
            if os.path.exists(os.path.join(self.save_dir, f"save{i}_{game_mode}.dat")):
                saves.append(i)
                
        return saves

class Player:
    def __init__(self, name):
        self.name = name
        self.level = 1
        self.exp = 0
        self.bitcoins = 1000
        self.skills = {
            "hacking": 1,
            "stealth": 1,
            "programming": 1,
            "social": 1,
            "investigation": 1
        }
        self.inventory = []
        self.story_progress = 1
        self.completed_missions = []
        self.reputation = 0
        self.achievements = []
        
        # –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        self.personal_stats = {
            "play_time": 0,
            "chapters_completed": 0,
            "total_bitcoins_earned": 0,
            "hacks_completed": 0,
            "items_collected": 0,
            "achievements_unlocked": 0,
            "start_date": datetime.now().isoformat(),
            "last_play_date": datetime.now().isoformat()
        }
        
    def add_exp(self, amount):
        self.exp += amount
        if self.exp >= self.level * 1000:
            old_level = self.level
            self.level_up()
            return old_level
        return None
        
    def level_up(self):
        self.level += 1
        self.exp = 0
        # –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
        for skill in self.skills:
            self.skills[skill] += 1
        return f"üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å {self.level}. –í—Å–µ –Ω–∞–≤—ã–∫–∏ +1!"
        
    def add_skill(self, skill, amount=1):
        if skill in self.skills:
            self.skills[skill] += amount
            return f"‚ö° {skill.upper()} –ø–æ–≤—ã—à–µ–Ω –¥–æ {self.skills[skill]}"
        return ""
        
    def add_bitcoins(self, amount):
        self.bitcoins += amount
        self.personal_stats["total_bitcoins_earned"] += amount
        return f"üí∞ +{amount} BTC"
        
    def add_achievement(self, achievement):
        if achievement not in self.achievements:
            self.achievements.append(achievement)
            self.personal_stats["achievements_unlocked"] += 1
            return f"üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement}"
        return ""
        
    def add_item(self):
        self.personal_stats["items_collected"] += 1
        
    def add_hack(self):
        self.personal_stats["hacks_completed"] += 1
        
    def update_play_time(self, play_time):
        self.personal_stats["play_time"] += play_time
        self.personal_stats["last_play_date"] = datetime.now().isoformat()

class GameEngine:
    def __init__(self):
        self.data = GameData()
        self.player = None
        self.current_chapter = None
        self.current_scene = "start"
        self.game_mode = "story"  # story –∏–ª–∏ sandbox
        self.start_time = time.time()
        
    def clear_screen(self):
        os.system('clear' if os.name == 'posix' else 'cls')
        
    def print_ascii(self, art_name):
        art_file = f"data/ascii_arts/{art_name}.txt"
        if os.path.exists(art_file):
            with open(art_file, 'r', encoding='utf-8') as f:
                print(f.read())
                
    def type_text(self, text, delay=0.03):
        if self.data.config.get("animations", True):
            for char in text:
                print(char, end='', flush=True)
                time.sleep(delay)
            print()
        else:
            print(text)
            
    def show_guide(self):
        self.print_ascii("anonymous_guide")
        
    def hacking_animation(self, target):
        if not self.data.config.get("animations", True):
            print(f"–í–∑–ª–æ–º {target}...")
            return
            
        print(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –≤–∑–ª–æ–º {target}...")
        self.show_guide()
        
        frames = [
            "‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 10%", "‚ñå‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 20%", "‚ñå‚ñå‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 30%",
            "‚ñå‚ñå‚ñå‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%", "‚ñå‚ñå‚ñå‚ñå‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë 50%", "‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñë‚ñë‚ñë‚ñë 60%", 
            "‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñë‚ñë‚ñë 70%", "‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñë‚ñë 80%", "‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñë 90%",
            "‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå 100%"
        ]
        for frame in frames:
            print(f"üñ•Ô∏è  {frame}", end='\r')
            time.sleep(0.2)
        print("\n")
        
    def show_main_menu(self):
        while True:
            self.clear_screen()
            self.print_ascii("main_menu")
            print("\n" + "="*60)
            print("1. üìñ –°–Æ–ñ–ï–¢–ù–´–ô –†–ï–ñ–ò–ú")
            print("2. üéØ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú")
            print("3. üíæ –ó–ê–ì–†–£–ó–ò–¢–¨ –ò–ì–†–£") 
            print("4. ‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò")
            print("5. üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            print("6. üîÑ –ü–†–û–í–ï–†–ò–¢–¨ –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
            print("7. üö™ –í–´–•–û–î")
            print("="*60)
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-7]: ").strip()
            
            if choice == "1":
                self.story_mode_menu()
            elif choice == "2":
                self.sandbox_mode_menu()
            elif choice == "3":
                self.load_game_menu()
            elif choice == "4":
                self.settings_menu()
            elif choice == "5":
                self.show_stats()
            elif choice == "6":
                self.check_updates()
            elif choice == "7":
                self.exit_game()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def story_mode_menu(self):
        """–ú–µ–Ω—é —Å—é–∂–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        while True:
            self.clear_screen()
            print("üìñ –°–Æ–ñ–ï–¢–ù–´–ô –†–ï–ñ–ò–ú")
            print("="*30)
            print("1. üéÆ –ù–û–í–ê–Ø –ò–ì–†–ê")
            print("2. üíæ –ó–ê–ì–†–£–ó–ò–¢–¨ –°–Æ–ñ–ï–¢")
            print("3. üîô –ù–ê–ó–ê–î")
            print()
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-3]: ").strip()
            
            if choice == "1":
                self.start_new_game("story")
            elif choice == "2":
                self.load_specific_game("story")
            elif choice == "3":
                return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def sandbox_mode_menu(self):
        """–ú–µ–Ω—é —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        while True:
            self.clear_screen()
            print("üéØ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú")
            print("="*30)
            print("1. üéÆ –ù–û–í–ê–Ø –ò–ì–†–ê")
            print("2. üíæ –ó–ê–ì–†–£–ó–ò–¢–¨ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú")
            print("3. üîô –ù–ê–ó–ê–î")
            print()
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-3]: ").strip()
            
            if choice == "1":
                self.start_new_game("sandbox")
            elif choice == "2":
                self.load_specific_game("sandbox")
            elif choice == "3":
                return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def start_new_game(self, mode):
        self.clear_screen()
        print("üéÆ –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê")
        print("="*30)
        
        name = input("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ —Ö–∞–∫–µ—Ä–∞: ").strip()
        if not name:
            name = "Neo"
            
        self.player = Player(name)
        self.game_mode = mode
        
        print(f"\nüë§ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {self.player.name}!")
        
        if mode == "story":
            print("üìñ –ó–∞–ø—É—Å–∫ –°–Æ–ñ–ï–¢–ù–û–ì–û –†–ï–ñ–ò–ú–ê...")
            time.sleep(2)
            self.start_story_mode()
        else:
            print("üéØ –ó–∞–ø—É—Å–∫ –°–í–û–ë–û–î–ù–û–ì–û –†–ï–ñ–ò–ú–ê...")
            time.sleep(2)
            self.start_sandbox_mode()
    
    def start_story_mode(self):
        """–ó–∞–ø—É—Å–∫ —Å—é–∂–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        # –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ç-—Å—Ü–µ–Ω–∞
        self.clear_screen()
        self.type_text("\n–ì–æ–¥ 2049. –¶–∏—Ñ—Ä–æ–≤–æ–π –º–∏—Ä —Å—Ç–∞–ª –Ω–æ–≤–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é...")
        time.sleep(1)
        self.type_text("–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å –Ω–∞—Å–ª–µ–¥–∏–µ —Å–≤–æ–µ–≥–æ –¥—è–¥–∏ - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ö–∞–∫–µ—Ä–∞...")
        time.sleep(1)
        self.type_text("–ï–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞: '–ù–µ –¥–æ–≤–µ—Ä—è–π —Å–∏—Å—Ç–µ–º–µ, –∏—â–∏ –ø—Ä–∞–≤–¥—É –≤ –∫–æ–¥–µ'...")
        time.sleep(1)
        self.show_guide()
        self.type_text("\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ì–∏–¥: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –ø–æ–¥–ø–æ–ª—å–µ. –Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º.'")
        time.sleep(2)
        
        input("\nüéØ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ...")
        self.play_story_mode()
    
    def start_sandbox_mode(self):
        """–ó–∞–ø—É—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.clear_screen()
        self.type_text("\nüéØ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        self.type_text("–ó–¥–µ—Å—å –Ω–µ—Ç —Å—é–∂–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ —Ç—ã –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞.")
        self.type_text("–°–æ–∑–¥–∞–≤–∞–π —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é, –≤–∑–ª–∞–º—ã–≤–∞–π —Ü–µ–ª–∏, —Ä–∞–∑–≤–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏!")
        time.sleep(2)
        
        # –î–∞–µ–º –±–æ–Ω—É—Å—ã –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        self.player.bitcoins = 5000
        self.player.level = 5
        for skill in self.player.skills:
            self.player.skills[skill] = 3
            
        print(f"\nüí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: 5000 BTC")
        print(f"üéØ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ 5")
        print(f"‚ö° –í—Å–µ –Ω–∞–≤—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ 3")
        
        input("\nüéÆ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")
        self.sandbox_loop()
        
    def play_story_mode(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—é–∂–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        for i, chapter in enumerate(chapters, 1):
            if i == self.player.story_progress:
                self.play_chapter(chapter, i)
                self.player.story_progress += 1
                self.player.personal_stats["chapters_completed"] += 1
                
                # –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
                if self.data.config.get("autosave", True):
                    if self.data.save_game(self.player.__dict__, 0, "story"):
                        print("üíæ –°—é–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
                    time.sleep(1)
                    
        self.print_ascii("victory")
        print("üéä –°–Æ–ñ–ï–¢–ù–´–ô –†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù!")
        print("–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        self.sandbox_loop()
        
    def sandbox_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.game_mode = "sandbox"
        
        while True:
            self.clear_screen()
            print("üéØ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú")
            print("="*50)
            print(f"üë§ {self.player.name} | üí∞ {self.player.bitcoins} BTC | üéØ –£—Ä. {self.player.level}")
            print("="*50)
            print()
            print("1. üåê –í–ó–õ–û–ú –°–ï–†–í–ï–†–û–í")
            print("2. üõí –ú–ê–ì–ê–ó–ò–ù")
            print("3. üìä –ü–†–û–§–ò–õ–¨")
            print("4. üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø")
            print("5. üíæ –°–û–•–†–ê–ù–ò–¢–¨ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú")
            print("6. üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
            print()
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-6]: ").strip()
            
            if choice == "1":
                self.hacking_menu()
            elif choice == "2":
                self.shop_menu()
            elif choice == "3":
                self.profile_menu()
            elif choice == "4":
                self.achievements_menu()
            elif choice == "5":
                self.save_specific_game("sandbox")
            elif choice == "6":
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                if self.data.config.get("autosave", True):
                    self.data.save_game(self.player.__dict__, 0, "sandbox")
                return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def play_chapter(self, chapter, chapter_num):
        self.current_scene = "start"
        
        while self.current_scene not in ["chapter_end", "next_chapter", "game_end"]:
            if self.current_scene not in chapter["scenes"]:
                print(f"–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞ '{self.current_scene}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.current_scene = "chapter_end"
                break
                
            scene = chapter["scenes"][self.current_scene]
            
            self.clear_screen()
            print(f"üìñ {chapter['title']}")
            print("="*50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∏–¥–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ö
            if chapter.get("guide_appearance", False) and self.current_scene == "start":
                self.show_guide()
                self.type_text("\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ì–∏–¥: '–≠—Ç–∞ –º–∏—Å—Å–∏—è –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω.'\n")
            
            self.type_text(f"\n{scene['text']}\n")
            
            if "choices" in scene and scene["choices"]:
                for i, choice in enumerate(scene["choices"], 1):
                    print(f"{i}. {choice['text']}")
                    
                print()
                try:
                    choice_num = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
                    if 1 <= choice_num <= len(scene["choices"]):
                        selected = scene["choices"][choice_num - 1]
                        result = self.apply_effects(selected.get("effect", {}))
                        if result:
                            print(result)
                        self.current_scene = selected["next"]
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                        input()
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                    input()
            else:
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
                self.current_scene = "chapter_end"
                
        if self.current_scene == "game_end":
            self.game_complete()
                
    def apply_effects(self, effects):
        results = []
        
        if "bitcoins" in effects:
            results.append(self.player.add_bitcoins(effects["bitcoins"]))
            
        if "level" in effects:
            self.player.level = effects["level"]
            results.append(f"üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {effects['level']}!")
            
        if "skill" in effects:
            results.append(self.player.add_skill(effects["skill"], effects.get("value", 1)))
            
        if "exp" in effects:
            old_level = self.player.add_exp(effects["exp"])
            if old_level:
                results.append(self.player.level_up())
            else:
                results.append(f"‚≠ê +{effects['exp']} –æ–ø—ã—Ç–∞")
            
        if "item" in effects:
            self.player.inventory.append(effects["item"])
            self.player.add_item()
            results.append(f"üéí –ü–æ–ª—É—á–µ–Ω: {effects['item']}")
            
        if "reputation" in effects:
            self.player.reputation += effects["reputation"]
            results.append(f"üìä –†–µ–ø—É—Ç–∞—Ü–∏—è: {self.player.reputation}")
            
        if "achievement" in effects and effects["achievement"]:
            results.append(self.player.add_achievement(effects["achievement"]))
            
        time.sleep(1)
        return "\n".join(results)
        
    def hacking_menu(self):
        targets = [
            {"name": "üè¢ MegaCorp Inc", "reward": 500, "difficulty": 1, "req_level": 1},
            {"name": "üèõÔ∏è  Police Database", "reward": 1000, "difficulty": 2, "req_level": 2},
            {"name": "üíä Black Market", "reward": 2000, "difficulty": 3, "req_level": 3},
            {"name": "üîê Shadow Network", "reward": 5000, "difficulty": 5, "req_level": 5},
            {"name": "üåç Global Bank", "reward": 10000, "difficulty": 8, "req_level": 8},
            {"name": "üêâ –ö–∏–±–µ—Ä–î—Ä–∞–∫–æ–Ω", "reward": 20000, "difficulty": 10, "req_level": 10},
            {"name": "ü§ñ –ò–ò –ê–≤–∞–ª–æ–Ω", "reward": 50000, "difficulty": 15, "req_level": 15},
            {"name": "‚öõÔ∏è  –ö–≤–∞–Ω—Ç–æ–≤–∞—è –°–µ—Ç—å", "reward": 100000, "difficulty": 20, "req_level": 20}
        ]
        
        while True:
            self.clear_screen()
            print("üéØ –í–´–ë–û–† –¶–ï–õ–ò –î–õ–Ø –í–ó–õ–û–ú–ê")
            print("="*40)
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {self.player.bitcoins} BTC")
            print("="*40)
            print()
            
            for i, target in enumerate(targets, 1):
                status = "üü¢" if self.player.level >= target["req_level"] else "üî¥"
                print(f"{i}. {status} {target['name']}")
                print(f"   –ù–∞–≥—Ä–∞–¥–∞: {target['reward']} BTC | –£—Ä–æ–≤–µ–Ω—å: {target['req_level']}+")
                print()
                
            print(f"{len(targets)+1}. üîô –ù–ê–ó–ê–î")
            print()
            
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: "))
                if 1 <= choice <= len(targets):
                    target = targets[choice-1]
                    
                    if self.player.level < target["req_level"]:
                        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {target['req_level']}!")
                        input("–ù–∞–∂–º–∏—Ç–µ Enter...")
                        continue
                        
                    self.hacking_animation(target["name"])
                    
                    success_chance = min(0.95, (self.player.skills["hacking"] * 0.25) / target["difficulty"])
                    
                    if random.random() < success_chance:
                        reward = target["reward"]
                        # –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–≤—ã–∫–∏
                        if self.player.skills["hacking"] > target["difficulty"]:
                            bonus = reward // 2
                            reward += bonus
                            print(f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ: +{bonus} BTC")
                            
                        self.player.bitcoins += reward
                        exp_gain = reward // 2
                        old_level = self.player.add_exp(exp_gain)
                        self.player.add_hack()
                        
                        print("‚úÖ –í–ó–õ–û–ú –£–°–ü–ï–®–ï–ù!")
                        print(f"üí∞ +{reward} BTC")
                        print(f"‚≠ê +{exp_gain} –æ–ø—ã—Ç–∞")
                        
                        if old_level:
                            print(self.player.level_up())
                        
                        # –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
                        if random.random() < 0.4:
                            items = ["üîë –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", "üíæ –≠–∫—Å–ø–ª–æ–π—Ç", "üõ°Ô∏è –§–∞–π—Ä–≤–æ–ª", "üì° –°–Ω–∏—Ñ—Ñ–µ—Ä", "‚ö° –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å"]
                            item = random.choice(items)
                            self.player.inventory.append(item)
                            self.player.add_item()
                            print(f"üéí –ù–∞–π–¥–µ–Ω: {item}")
                            
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                        if reward >= 50000:
                            print(self.player.add_achievement("üíé –ú–∞—Å—Ç–µ—Ä –≤–∑–ª–æ–º–∞"))
                            
                    else:
                        penalty = min(500, self.player.bitcoins // 4)
                        self.player.bitcoins = max(0, self.player.bitcoins - penalty)
                        print("‚ùå –í–ó–õ–û–ú –ü–†–û–í–ê–õ–ï–ù!")
                        print(f"üí• –®—Ç—Ä–∞—Ñ: {penalty} BTC")
                        
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
                    
                elif choice == len(targets)+1:
                    return
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                
    def shop_menu(self):
        items = [
            {"name": "üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–∞–Ω–µ—Ä", "price": 2000, "skill": "hacking", "bonus": 2, "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–∑–ª–æ–º–∞"},
            {"name": "üõ°Ô∏è  –ê–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä", "price": 1500, "skill": "stealth", "bonus": 2, "description": "–°–Ω–∏–∂–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"},
            {"name": "üíª –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤", "price": 3000, "skill": "programming", "bonus": 3, "description": "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã"},
            {"name": "üì° DDoS —É—Ç–∏–ª–∏—Ç–∞", "price": 2500, "skill": "hacking", "bonus": 1, "description": "–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞—Ç–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã"},
            {"name": "üîì –ù–∞–±–æ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏", "price": 1800, "skill": "social", "bonus": 2, "description": "–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ª—é–¥–µ–π"},
            {"name": "üïµÔ∏è  –¢—Ä–µ–∫–µ—Ä", "price": 2200, "skill": "investigation", "bonus": 2, "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–ª–µ–¥–æ–≤"},
            {"name": "‚ö° –ö–≤–∞–Ω—Ç–æ–≤—ã–π –¥–µ—à–∏—Ñ—Ä–∞—Ç–æ—Ä", "price": 5000, "skill": "hacking", "bonus": 5, "description": "–ü–µ—Ä–µ–¥–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –≤–∑–ª–æ–º–∞"},
            {"name": "üß† –ù–µ–π—Ä–æ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "price": 8000, "skill": "programming", "bonus": 4, "description": "–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º"}
        ]
        
        while True:
            self.clear_screen()
            print("üõí –ú–ê–ì–ê–ó–ò–ù –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
            print("="*40)
            print(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {self.player.bitcoins} BTC")
            print("="*40)
            print()
            
            for i, item in enumerate(items, 1):
                print(f"{i}. {item['name']} - {item['price']} BTC")
                print(f"   {item['description']}")
                print(f"   –ë–æ–Ω—É—Å: +{item['bonus']} –∫ {item['skill']}")
                print()
                
            print(f"{len(items)+1}. üîô –ù–ê–ó–ê–î")
            print()
            
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: "))
                if 1 <= choice <= len(items):
                    item = items[choice-1]
                    
                    if self.player.bitcoins >= item["price"]:
                        self.player.bitcoins -= item["price"]
                        self.player.skills[item["skill"]] += item["bonus"]
                        self.player.inventory.append(item["name"])
                        self.player.add_item()
                        
                        print(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['name']}")
                        print(f"‚ö° {item['skill']} –ø–æ–≤—ã—à–µ–Ω –¥–æ {self.player.skills[item['skill']]}")
                        
                        if item["price"] >= 5000:
                            print(self.player.add_achievement("üõí –ö—Ä—É–ø–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"))
                            
                    else:
                        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC!")
                        
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
                    
                elif choice == len(items)+1:
                    return
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                
    def profile_menu(self):
        self.clear_screen()
        print("üìä –ü–†–û–§–ò–õ–¨ –•–ê–ö–ï–†–ê")
        print("="*40)
        print(f"üë§ –ò–º—è: {self.player.name}")
        print(f"üéØ –£—Ä–æ–≤–µ–Ω—å: {self.player.level}")
        print(f"üí∞ BTC: {self.player.bitcoins}")
        print(f"‚≠ê –û–ø—ã—Ç: {self.player.exp}/{(self.player.level + 1) * 1000}")
        print(f"üìñ –ü—Ä–æ–≥—Ä–µ—Å—Å: –ì–ª–∞–≤–∞ {self.player.story_progress}/30")
        print(f"üìä –†–µ–ø—É—Ç–∞—Ü–∏—è: {self.player.reputation}")
        print(f"üéÆ –†–µ–∂–∏–º: {'üìñ –°–Æ–ñ–ï–¢–ù–´–ô' if self.game_mode == 'story' else 'üéØ –°–í–û–ë–û–î–ù–´–ô'}")
        print()
        
        print("üõ†Ô∏è  –ù–ê–í–´–ö–ò:")
        for skill, level in self.player.skills.items():
            print(f"  {skill}: {'‚≠ê' * level} (—É—Ä–æ–≤–µ–Ω—å {level})")
        print()
        
        print("üéí –ò–ù–í–ï–ù–¢–ê–†–¨:")
        if self.player.inventory:
            for i, item in enumerate(self.player.inventory, 1):
                print(f"  {i}. {item}")
        else:
            print("  –ü—É—Å—Ç–æ")
        print()
        
        # –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        print("üìà –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        stats = self.player.personal_stats
        print(f"  üïê –í—Ä–µ–º—è –∏–≥—Ä—ã: {int(stats['play_time'] // 60)} –º–∏–Ω—É—Ç")
        print(f"  üéØ –ì–ª–∞–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['chapters_completed']}")
        print(f"  üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_bitcoins_earned']} BTC")
        print(f"  üåê –í–∑–ª–æ–º–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['hacks_completed']}")
        print(f"  üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {stats['items_collected']}")
        print(f"  üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {stats['achievements_unlocked']}")
        print(f"  üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {stats['start_date'][:10]}")
        print()
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        
    def achievements_menu(self):
        self.clear_screen()
        print("üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø")
        print("="*40)
        print()
        
        all_achievements = [
            "üíé –ú–∞—Å—Ç–µ—Ä –≤–∑–ª–æ–º–∞", "üõí –ö—Ä—É–ø–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
            "üîê –ù–µ—É—è–∑–≤–∏–º—ã–π", "üåê –°–µ—Ç–µ–≤–æ–π –≥—É—Ä—É", "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-–≤–∏—Ä—Ç—É–æ–∑",
            "üïµÔ∏è  –°–ª–µ–¥–æ–ø—ã—Ç", "üéØ –°–Ω–∞–π–ø–µ—Ä", "üí∞ –ö—Ä–∏–ø—Ç–æ-–º–∞–≥–Ω–∞—Ç",
            "üèÅ –õ–µ–≥–µ–Ω–¥–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞"
        ]
        
        for achievement in all_achievements:
            if achievement in self.player.achievements:
                print(f"‚úÖ {achievement}")
            else:
                print(f"‚ùå {achievement} [–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û]")
        print()
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
    
    def save_specific_game(self, mode):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        self.clear_screen()
        print(f"üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï {'–°–Æ–ñ–ï–¢–ê' if mode == 'story' else '–°–í–û–ë–û–î–ù–û–ì–û –†–ï–ñ–ò–ú–ê'}")
        print("="*30)
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        autosave_file = os.path.join(self.data.save_dir, f"autosave_{mode}.dat")
        if os.path.exists(autosave_file):
            with open(autosave_file, 'rb') as f:
                save_data = pickle.load(f)
            print("0. [–ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï] - –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è")
        else:
            print("0. [–ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï] - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        for i in range(1, 4):
            save_file = os.path.join(self.data.save_dir, f"save{i}_{mode}.dat")
            if os.path.exists(save_file):
                with open(save_file, 'rb') as f:
                    save_data = pickle.load(f)
                print(f"{i}. [–°–û–•–†–ê–ù–ï–ù–ò–ï {i}] {save_data['player']['name']} - {save_data['timestamp'][:10]}")
            else:
                print(f"{i}. [–°–û–•–†–ê–ù–ï–ù–ò–ï {i}] - —Å–≤–æ–±–æ–¥–Ω–æ")
                
        print("5. üîô –ù–ê–ó–ê–î")
        print()
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç: "))
            if 0 <= choice <= 3:
                if self.data.save_game(self.player.__dict__, choice, mode):
                    slot_name = "–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ" if choice == 0 else f"—Å–ª–æ—Ç {choice}"
                    mode_name = "—Å—é–∂–µ—Ç" if mode == "story" else "—Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º"
                    print(f"‚úÖ {mode_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {slot_name}!")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            elif choice == 5:
                return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
        
    def load_specific_game(self, mode):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        saves = self.data.get_saves(mode)
        if not saves:
            print(f"‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è {'—Å—é–∂–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞' if mode == 'story' else '—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'}!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            return
            
        self.clear_screen()
        print(f"üíæ –ó–ê–ì–†–£–ó–ö–ê {'–°–Æ–ñ–ï–¢–ê' if mode == 'story' else '–°–í–û–ë–û–î–ù–û–ì–û –†–ï–ñ–ò–ú–ê'}")
        print("="*30)
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        autosave_file = os.path.join(self.data.save_dir, f"autosave_{mode}.dat")
        if os.path.exists(autosave_file):
            with open(autosave_file, 'rb') as f:
                save_data = pickle.load(f)
            print("0. [–ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï]")
            print(f"   –ò–º—è: {save_data['player']['name']} | –£—Ä. {save_data['player']['level']}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: –ì–ª–∞–≤–∞ {save_data['player']['story_progress']} | {save_data['timestamp'][:10]}")
            print()
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        for i in range(1, 4):
            save_file = os.path.join(self.data.save_dir, f"save{i}_{mode}.dat")
            if os.path.exists(save_file):
                with open(save_file, 'rb') as f:
                    save_data = pickle.load(f)
                print(f"{i}. [–°–û–•–†–ê–ù–ï–ù–ò–ï {i}]")
                print(f"   –ò–º—è: {save_data['player']['name']} | –£—Ä. {save_data['player']['level']}")
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: –ì–ª–∞–≤–∞ {save_data['player']['story_progress']} | {save_data['timestamp'][:10]}")
                print()
                
        print("5. üîô –ù–ê–ó–ê–î")
        print()
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç: "))
            if 0 <= choice <= 3:
                save_data = self.data.load_game(choice, mode)
                if save_data:
                    self.player = Player("")
                    self.player.__dict__.update(save_data['player'])
                    self.game_mode = mode
                    print(f"‚úÖ {'–°—é–∂–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º' if mode == 'story' else '–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º'} –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter...")
                    
                    if mode == "story":
                        self.play_story_mode()
                    else:
                        self.sandbox_loop()
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            elif choice == 5:
                return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")
    
    def load_game_menu(self):
        """–û–±—â–µ–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
        self.clear_screen()
        print("üíæ –ó–ê–ì–†–£–ó–ö–ê –ò–ì–†–´")
        print("="*30)
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
        story_saves = self.data.get_saves("story")
        sandbox_saves = self.data.get_saves("sandbox")
        
        print("üìñ –°–Æ–ñ–ï–¢–ù–´–ô –†–ï–ñ–ò–ú:")
        if story_saves:
            print("   ‚úÖ –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            print("   ‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")
            
        print("üéØ –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú:")
        if sandbox_saves:
            print("   ‚úÖ –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            print("   ‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")
        print()
        
        print("1. üìñ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—é–∂–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
        print("2. üéØ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º")
        print("3. üîô –ù–∞–∑–∞–¥")
        print()
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-3]: ").strip()
        
        if choice == "1":
            self.load_specific_game("story")
        elif choice == "2":
            self.load_specific_game("sandbox")
        elif choice == "3":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            
    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∞–ø–¥–µ–π—Ç–µ—Ä"""
        self.clear_screen()
        print("üîÑ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô")
        print("="*30)
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–ø–¥–µ–π—Ç–µ—Ä–∞
        if os.path.exists("updater.py"):
            print("‚úÖ –ê–ø–¥–µ–π—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω")
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–ø–¥–µ–π—Ç–µ—Ä
            os.system("python3 updater.py")
        else:
            print("‚ùå –ê–ø–¥–µ–π—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üì• –°–∫–∞—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å GitHub")
            print("üåê https://github.com/yourusername/terminal-shadows")
            
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
            
    def settings_menu(self):
        while True:
            self.clear_screen()
            print("‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò")
            print("="*30)
            print(f"–Ø–∑—ã–∫: {self.data.config['language']}")
            print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.data.config['difficulty']}")
            print(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'–í–∫–ª' if self.data.config['autosave'] else '–í—ã–∫–ª'}")
            print(f"–ê–Ω–∏–º–∞—Ü–∏–∏: {'–í–∫–ª' if self.data.config['animations'] else '–í—ã–∫–ª'}")
            print()
            print("1. –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
            print("2. –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
            print("3. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            print("4. –ê–Ω–∏–º–∞—Ü–∏–∏")
            print("5. üóëÔ∏è  –°–ë–†–û–° –°–û–•–†–ê–ù–ï–ù–ò–ô")
            print("6. üîô –ù–ê–ó–ê–î")
            print()
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-6]: ").strip()
            
            if choice == "1":
                self.data.config['language'] = "ru" if self.data.config['language'] == "en" else "en"
                self.data.save_config()
                print("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!")
                input()
            elif choice == "2":
                difficulties = ["–ª–µ–≥–∫–∞—è", "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è", "—Å–ª–æ–∂–Ω–∞—è"]
                current = self.data.config['difficulty']
                next_diff = difficulties[(difficulties.index(current) + 1) % len(difficulties)]
                self.data.config['difficulty'] = next_diff
                self.data.save_config()
                print(f"‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {next_diff}!")
                input()
            elif choice == "3":
                self.data.config['autosave'] = not self.data.config['autosave']
                self.data.save_config()
                print(f"‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if self.data.config['autosave'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}!")
                input()
            elif choice == "4":
                self.data.config['animations'] = not self.data.config['animations']
                self.data.save_config()
                print(f"‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏: {'–≤–∫–ª—é—á–µ–Ω—ã' if self.data.config['animations'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
                input()
            elif choice == "5":
                if input("‚ùå –£–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è? (y/N): ").lower() == 'y':
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    for mode in ["story", "sandbox"]:
                        # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                        autosave_file = os.path.join(self.data.save_dir, f"autosave_{mode}.dat")
                        if os.path.exists(autosave_file):
                            os.remove(autosave_file)
                        # –£–¥–∞–ª—è–µ–º —Ä—É—á–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        for i in range(1, 4):
                            save_file = os.path.join(self.data.save_dir, f"save{i}_{mode}.dat")
                            if os.path.exists(save_file):
                                os.remove(save_file)
                    print("‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")
                    input()
            elif choice == "6":
                return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
                
    def show_stats(self):
        self.clear_screen()
        print("üìä –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*30)
        print()
        print("üéÆ –í—Å–µ–≥–æ –≥–ª–∞–≤: 30")
        print("üéØ –¶–µ–ª–µ–π –¥–ª—è –≤–∑–ª–æ–º–∞: 8")
        print("üõí –¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: 8")
        print("‚ö° –ù–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏: 5")
        print("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: 10")
        print("üíæ –†–µ–∂–∏–º—ã: –°–Æ–ñ–ï–¢–ù–´–ô –∏ –°–í–û–ë–û–î–ù–´–ô")
        print()
        print("üöÄ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
        print("  ‚Ä¢ 30 –≥–ª–∞–≤ —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—é–∂–µ—Ç–∞")
        print("  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏")
        print("  ‚Ä¢ –†–∞–∑–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")
        print("  ‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã")
        print("  ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
        print()
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        
    def game_complete(self):
        self.clear_screen()
        print("üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!")
        print("="*30)
        print()
        print("üèÅ –í–´ –ó–ê–í–ï–†–®–ò–õ–ò –°–Æ–ñ–ï–¢–ù–´–ô –†–ï–ñ–ò–ú TERMINAL SHADOWS!")
        print()
        print("üìä –í–ê–®–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"  üë§ –ò–º—è: {self.player.name}")
        print(f"  üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {self.player.level}")
        print(f"  üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ BTC: {self.player.bitcoins}")
        print(f"  üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(self.player.achievements)}/10")
        print(f"  üìñ –ü—Ä–æ–π–¥–µ–Ω–æ –≥–ª–∞–≤: 30/30")
        print()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.player.personal_stats
        print("üìà –í–ê–®–ê –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üïê –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–≥—Ä–µ: {int(stats['play_time'] // 60)} –º–∏–Ω—É—Ç")
        print(f"  üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ BTC: {stats['total_bitcoins_earned']}")
        print(f"  üåê –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–∑–ª–æ–º–æ–≤: {stats['hacks_completed']}")
        print(f"  üéí –°–æ–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {stats['items_collected']}")
        print()
        
        print("üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
        print("–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –°–í–û–ë–û–î–ù–´–ô –†–ï–ñ–ò–ú —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!")
        print()
        input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        self.sandbox_loop()
            
    def exit_game(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        play_time = time.time() - self.start_time
        if self.player:
            self.player.update_play_time(play_time)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            if self.data.config.get("autosave", True) and self.game_mode:
                self.data.save_game(self.player.__dict__, 0, self.game_mode)
        
        self.clear_screen()
        print("üëã –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –ø–æ–¥–ø–æ–ª—å–µ!")
        print("TERMINAL SHADOWS: DIGITAL GHOST v2.0")
        if self.player:
            print(f"üïê –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ: {int(self.player.personal_stats['play_time'] // 60)} –º–∏–Ω—É—Ç")
        time.sleep(2)
        sys.exit(0)

if __name__ == "__main__":
    try:
        game = GameEngine()
        game.show_main_menu()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥...")
        game.exit_game()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
